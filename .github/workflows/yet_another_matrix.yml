---
concurrency:
  cancel-in-progress: true
  group: '${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}'
defaults:
  run:
    shell: bash
env:
  CACHIX_NAME: sigprof
  CI_NIX_INSTALL_URL: https://releases.nixos.org/nix/nix-2.14.1/install
  NIX_CONFIG: 'access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}'
  nur_channels: nixpkgs-unstable nixos-unstable nixos-23.05 nixos-22.11
  nur_main_channel: nixos-23.05
  nur_systems: x86_64-linux x86_64-darwin
jobs:
  finish:
    env:
      ci_success: |-
        ${{
          (needs.setup_flake.result == 'success')
          && (needs.setup_nur.result == 'success' || needs.setup_nur.result == 'skipped')
          && (needs.x86_64-linux.result == 'success')
          && (needs.x86_64-darwin.result == 'success' || needs.x86_64-darwin.result == 'skipped')
        }}
    if: (always() && !cancelled())
    needs:
      - setup_flake
      - setup_nur
      - x86_64-linux
      - x86_64-darwin
    runs-on: ubuntu-latest
    steps:
      - if: env.ci_success == 'true'
        name: Notify on success
        run: echo "Dummy notify on success"
      - if: env.ci_success == 'false'
        name: Notify on failure
        run: echo "Dummy notify on failure"
      - name: Report CI status
        run: $ci_success
  setup_flake:
    env:
      this_system: x86_64-linux
    outputs:
      cachix_name: '${{ env.CACHIX_NAME }}'
      flake_jobs: '${{ steps.collect_flake_jobs.outputs.flake_jobs }}'
      nix_install_url: '${{ env.CI_NIX_INSTALL_URL }}'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3.5.3
      - name: Install Nix
        uses: cachix/install-nix-action@v22
        with:
          install_url: '${{ env.CI_NIX_INSTALL_URL }}'
      - name: Setup Cachix
        uses: cachix/cachix-action@v12
        with:
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          extraPullNames: pre-commit-hooks
          name: '${{ env.CACHIX_NAME }}'
      - name: Check flake evaluation
        run: nix flake check --no-build --show-trace
      - id: collect_flake_jobs
        name: Collect flake jobs
        run: |
          # Collect flake jobs
          flake_jobs="$(nix eval --json .\#lib.ciData.matrix)"
          echo "::group::Flake jobs:"
          printf '%s' "$flake_jobs" | jq
          echo "::endgroup::"
          printf 'flake_jobs=%s\n' "$flake_jobs" >> $GITHUB_OUTPUT
      - env:
          flake_jobs: '${{ steps.collect_flake_jobs.outputs.flake_jobs }}'
        id: collect_setup_checks
        name: Collect setup checks
        run: |
          # Collect setup checks
          setup_checks="$(
            jq -nc --arg system "$this_system" '
            env.flake_jobs | fromjson |
              { checks: [ .[$system].flake.setupChecks.item[].checks[] ] }?
            '
          )"
          echo "::group::Setup checks:"
          printf '%s' "$setup_checks" | jq
          echo "::endgroup::"
          printf 'setup_checks=%s\n' "$setup_checks" >> $GITHUB_OUTPUT
      - if: '${{ steps.collect_setup_checks.outputs.setup_checks }}'
        name: Run setup checks
        uses: ./.github/actions/nix-build
        with:
          cachix-auth-token: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          cachix-name: '${{ env.CACHIX_NAME }}'
          item: '${{ steps.collect_setup_checks.outputs.setup_checks }}'
          nix-install-url: '${{ env.CI_NIX_INSTALL_URL }}'
          system: '${{ env.this_system }}'
  setup_nur:
    if: |-
      (always() && !cancelled()) && (!inputs.flake_only) && !(
        (github.event_name == 'pull_request')
        && (github.event.pull_request.head.repo.full_name == 'sigprof/test-workflows')
        && startsWith(github.event.pull_request.head.ref, 'automatic-flake-update/')
      )
    outputs:
      nur_jobs: '${{ steps.collect_nur_jobs.outputs.nur_jobs }}'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3.5.3
      - name: Install Nix
        uses: cachix/install-nix-action@v22
        with:
          install_url: '${{ env.CI_NIX_INSTALL_URL }}'
      - name: Setup Cachix
        uses: cachix/cachix-action@v12
        with:
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          extraPullNames: pre-commit-hooks
          name: '${{ env.CACHIX_NAME }}'
      - name: Check NUR evaluation
        run: |
          # Check NUR evaluation
          for channel in $nur_channels; do
            echo "::group::NUR evaluation for $channel:"
            nix-env -f . -qa \* --meta --xml \
              --allowed-uris https://static.rust-lang.org \
              --option restrict-eval true \
              --option allow-import-from-derivation true \
              --drv-path --show-trace \
              -I nixpkgs=$(NIX_PATH="nixpkgs=channel:$channel" nix-instantiate --find-file nixpkgs) \
              -I $PWD
            echo "::endgroup::"
          done
      - id: collect_nur_jobs
        name: Collect NUR jobs
        run: |
          # Collect NUR jobs
          # Determine how to handle `nixpkgs-unstable` and `nixos-unstable`.
          case "$nur_main_channel" in
            (nixos-unstable|nixpkgs-unstable)
              # If the flake follows one of the unstable channels, build NUR
              # packages for both unstable channels after the flake (hoping
              # that the packages would match the flake build results).
              job_for_nixpkgs_unstable="stage2"
              job_for_nixos_unstable="stage2"
              ;;
            (*)
              # If the flake follows a stable channel, build NUR package for
              # unstable channels independently from everything else ...
              job_for_nixpkgs_unstable="other"
              job_for_nixos_unstable="other"
              # ... except when both `nixpkgs-unstable` and `nixos-unstable`
              # are requested
              have_nixpkgs_unstable=
              have_nixos_unstable=
              for channel in $nur_channels; do
                case "$channel" in
                  (nixpkgs-unstable) have_nixpkgs_unstable=t ;;
                  (nixos-unstable) have_nixos_unstable=t ;;
                esac
              done
              # If both unstable branches are requested, `nixpkgs-unstable`
              # should be built in stage1, and `nixos-unstable` should be built
              # in stage3 (this way any errors triggered by the newest code
              # would be triggered early).
              if [ -n "$have_nixpkgs_unstable" ] && [ -n "$have_nixos_unstable" ]; then
                job_for_nixpkgs_unstable="stage1"
                job_for_nixos_unstable="stage3"
              fi
              ;;
          esac
          # Collect NUR jobs for all possible (system, channel) combinations,
          # accumulating them as multiple JSON values in $accumulated_nur_jobs.
          accumulated_nur_jobs=""
          for system in $nur_systems; do
            for channel in $nur_channels; do
              case "$channel" in
                (nixpkgs-unstable) job="$job_for_nixpkgs_unstable" ;;
                (nixos-unstable) job="$job_for_nixos_unstable" ;;
                (*)
                  if [ "$channel" = "$nur_main_channel" ]; then
                    job="stage2"
                  else
                    job="other"
                  fi
                  ;;
              esac
              nur_jobs_part="$(
                NIX_PATH="nixpkgs=channel:$channel" \
                  nix eval --argstr system "$system" --json -f nur.nix lib.ciData.matrix |
                  jq -c --arg system "$system" --arg channel "$channel" --arg job "$job" '
                    path(.[].nur.nurPackages.item) as $x
                    | getpath($x)
                    | {
                        ($x[0]): {
                          nur: {
                            ($job): {
                              include: [
                                {
                                  channel: $channel,
                                  item: .[]
                                }
                              ]
                            }
                          }
                        }
                      }
                  '
              )"
              echo "::group::NUR jobs for $system, $channel:"
              printf '%s' "$nur_jobs_part" | jq
              echo "::endgroup::"
              accumulated_nur_jobs="$accumulated_nur_jobs$nur_jobs_part"
            done
          done
          # Now merge multiple JSON objects into a single JSON.
          nur_jobs="$(
            printf '%s' "$accumulated_nur_jobs" |
              jq -c -n '
                def mergeRecursive(a; b):
                  a as $a | b as $b
                  | if ($a|type) == "object" and ($b|type) == "object"
                    then reduce ([$a, $b] | add | keys_unsorted[]) as $k (
                      {};
                      .[$k] = mergeRecursive($a[$k]; $b[$k])
                    )
                    elif ($a|type) == "array" and ($b|type) == "array"
                    then $a + $b
                    elif $b == null then $a
                    else $b
                end;
                reduce inputs as $item ({}; mergeRecursive(.; $item))
              '
          )"
          echo "::group::Collected NUR jobs:"
          printf '%s' "$nur_jobs" | jq
          echo "::endgroup::"
          printf 'nur_jobs=%s\n' "$nur_jobs" >> $GITHUB_OUTPUT
  x86_64-darwin:
    if: (always() && !cancelled()) && (needs.setup_flake.result == 'success') && (needs.setup_nur.result == 'success' || needs.setup_nur.result == 'skipped')
    needs:
      - setup_flake
      - setup_nur
    secrets:
      cachix-auth-token: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    uses: ./.github/workflows/ci-per-system.yml
    with:
      cachix-name: '${{ needs.setup_flake.outputs.cachix_name }}'
      flake-jobs: '${{ toJSON(fromJSON(needs.setup_flake.outputs.flake_jobs).x86_64-darwin.flake) }}'
      nix-install-url: '${{ needs.setup_flake.outputs.nix_install_url }}'
      nur-jobs: "${{ toJSON(fromJSON(needs.setup_nur.outputs.nur_jobs || '{}').x86_64-darwin.nur) }}"
      runs-on: macos-latest
      system: x86_64-darwin
  x86_64-linux:
    if: (always() && !cancelled()) && (needs.setup_flake.result == 'success') && (needs.setup_nur.result == 'success' || needs.setup_nur.result == 'skipped')
    needs:
      - setup_flake
      - setup_nur
    secrets:
      cachix-auth-token: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    uses: ./.github/workflows/ci-per-system.yml
    with:
      cachix-name: '${{ needs.setup_flake.outputs.cachix_name }}'
      flake-jobs: '${{ toJSON(fromJSON(needs.setup_flake.outputs.flake_jobs).x86_64-linux.flake) }}'
      nix-install-url: '${{ needs.setup_flake.outputs.nix_install_url }}'
      nur-jobs: "${{ toJSON(fromJSON(needs.setup_nur.outputs.nur_jobs || '{}').x86_64-linux.nur) }}"
      runs-on: ubuntu-latest
      system: x86_64-linux
name: CI
on:
  pull_request: ~
  push:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      flake_only:
        default: false
        description: Run flake tests only
        type: boolean
permissions: {}
